#!/usr/bin/env bash
#
# SG
#

# $HOME/.gnupg/gpg.conf

### Use GnuPG Agent (gpg-agent) for secret key management.

keyserver hkps://keys.openpgp.org

## If you use a graphical environment (and even if you don't) you should be using an agent:
## (similar arguments as https://www.debian-administration.org/users/dkg/weblog/64)
use-agent

## Don't disclose the version
no-emit-version

## Don't add additional comments (may leak language, etc)
no-comments

## We want to force UTF-8 everywhere
display-charset utf-8
utf8-strings

## You should always know at a glance which User IDs gpg thinks are legitimately bound to the keys in your keyring:
verify-options show-uid-validity
list-options show-uid-validity

## when outputting certificates, view user IDs distinctly from keys:
fixed-list-mode

## long keyids are more collision-resistant than short keyids (it's trivial to make a key with any desired short keyid)
keyid-format 0xlong

## Don't include keyids that may disclose the sender or any other non-obvious keyids
throw-keyids

### Display full fingerprints.

keyid-format long
with-fingerprint

## When creating a key, individuals may designate a specific keyserver to use to pull their keys from.
## The above option will disregard this designation and use the pool, which is useful because (1) it
## prevents someone from designating an insecure method for pulling their key and (2) if the server
## designated uses hkps, the refresh will fail because the ca-cert will not match, so the keys will
## never be refreshed.
keyserver-options no-honor-keyserver-url

## include an unambiguous indicator of which key made a signature:
## (see http://thread.gmane.org/gmane.mail.notmuch.general/3721/focus=7234)
sig-notation issuer-fpr@notations.openpgp.fifthhorseman.net=%g

### When verifying a signature made from a subkey, require that the
### cross-certification "back signature" on the subkey is present and valid.

require-cross-certification

### Prefer the strongest ciphers and digests in the OpenPGP specification.
### To list available algorithms: gpg --version

personal-cipher-preferences AES256
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
personal-compress-preferences BZIP2 ZLIB ZIP Uncompressed

### Use the strongest digest when signing a key.

cert-digest-algo SHA512

### reject SHA-1 signature

weak-digest SHA1

### never allow use 3DES

disable-cipher-algo 3DES

### use AES256 when symmetric encryption

s2k-cipher-algo AES256

### use SHA-512 when symmetric encryption

s2k-digest-algo SHA-512

### mangle password many times as possible when symmetric encryption

s2k-count 65011712

### both short and long key IDs are insecure\

keyid-format none

### use full fingerprint instead

with-subkey-fingerprint

default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
